# AI Spreadsheet Analyzer in Python
# ---------------------------------
#
# Description:
# This script analyzes a given CSV file using the OpenAI API (GPT model)
# and prints a data analysis summary to the console.
#
# Prerequisites:
# You need to have Python installed on your system.
# You also need to install the required libraries: pandas and openai.
# You can install them using pip:
#
# pip install pandas openai
#
# How to Run:
# 1. Save this script as a Python file (e.g., analyze.py).
# 2. Set your OpenAI API key as an environment variable named 'OPENAI_API_KEY'.
#    - On macOS/Linux: export OPENAI_API_KEY='your_api_key_here'
#    - On Windows: set OPENAI_API_KEY=your_api_key_here
#    Alternatively, you can hardcode your key in the script, but this is not recommended.
# 3. Run the script from your terminal, providing the path to your CSV file:
#
# python analyze.py /path/to/your/file.csv
#

import os
import pandas as pd
from openai import OpenAI
import argparse

def analyze_spreadsheet(file_path: str, api_key: str) -> str:
    """
    Reads a CSV file, sends its content to OpenAI for analysis, and returns the result.

    Args:
        file_path (str): The full path to the CSV file.
        api_key (str): Your OpenAI API key.

    Returns:
        str: The analysis text generated by the AI model.
        
    Raises:
        FileNotFoundError: If the csv_file_path does not exist.
        Exception: For API errors or other issues.
    """
    print(f"INFO: Reading data from '{file_path}'...")
    
    # --- Step 1: Read the CSV file using pandas ---
    try:
        df = pd.read_csv(file_path)
    except FileNotFoundError:
        raise FileNotFoundError(f"Error: The file at '{file_path}' was not found.")
    except Exception as e:
        raise Exception(f"Error reading or parsing the CSV file: {e}")

    # --- Step 2: Prepare the data for the API ---
    # Convert the first 50 rows of the dataframe to a string to use in the prompt.
    # We truncate the data to avoid exceeding the API's token limit for large files.
    data_sample_string = df.head(50).to_string()

    # --- Step 3: Set up the OpenAI client ---
    try:
        client = OpenAI(api_key=api_key)
    except Exception as e:
        raise Exception(f"Error initializing OpenAI client. Is your API key valid? Details: {e}")

    # --- Step 4: Define the prompt for the AI ---
    # This prompt guides the AI to act as a data analyst.
    prompt = f"""
    You are an expert data analyst. You have been provided with a sample of data from a spreadsheet.
    The data sample (first 50 rows) is as follows:

    {data_sample_string}

    Based on this data sample, please provide a concise but insightful analysis. Your response should include:
    1.  A high-level summary of what the data appears to represent.
    2.  Key insights, trends, or interesting patterns you observe in the provided sample.
    3.  Potential data quality issues, outliers, or anomalies if any are apparent.
    4.  Suggestions for what could be explored further if you had the full dataset.

    Present your analysis in a clear, easy-to-read format. Use markdown for lists and emphasis.
    """

    print("INFO: Sending data to AI for analysis. This may take a moment...")

    # --- Step 5: Call the OpenAI API ---
    try:
        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": prompt,
                }
            ],
            model="gpt-4o", # Using a powerful model for better analysis
            temperature=0.3, # Lower temperature for more factual, less creative responses
        )
        
        # Extract the response content
        analysis = chat_completion.choices[0].message.content
        return analysis

    except Exception as e:
        raise Exception(f"An error occurred while communicating with the OpenAI API: {e}")


def main():
    """
    Main function to parse arguments and run the analysis.
    """
    # --- Argument Parser Setup ---
    # This allows users to pass the file path as a command-line argument.
    parser = argparse.ArgumentParser(description="Analyze a spreadsheet using AI.")
    parser.add_argument("file_path", type=str, help="The path to the CSV file to analyze.")
    args = parser.parse_args()

    # --- API Key Retrieval ---
    # Fetches the API key from an environment variable for better security.
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("ERROR: The 'OPENAI_API_KEY' environment variable is not set.")
        print("Please set it before running the script.")
        return

    # --- Run Analysis and Print Results ---
    try:
        result = analyze_spreadsheet(args.file_path, api_key)
        print("\n" + "="*20 + " AI Analysis Result " + "="*20)
        print(result)
        print("\n" + "="*58)
    except (FileNotFoundError, Exception) as e:
        print(f"\nERROR: {e}")


if __name__ == "__main__":
    main()
